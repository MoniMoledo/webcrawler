drop dataverse webhose if exists
create dataverse webhose if not exists;
use dataverse webhose

create type typeEntity if not exists as open{
    name: string,
    sentiment: string
}

create type typeEntities if not exists as open{
    persons: [typeEntity],
    organizations: [typeEntity],
    locations: [typeEntity]
}

create type typeActions if not exists as open{
    likes: int64?,
    comments: int64?,
    shares: int64?
}

create type typeSocial if not exists as open{
    facebook: typeActions,
    gplus: typeActions,
    pinterest: typeActions,
    linkedin: typeActions,
    stumbledupon: typeActions,
    vk: typeActions
}

create type typeGeoTag if not exists as open {
    stateID: int32,
    stateName: string,
    countyID: int32,
    countyName: string,
    cityID: int32?,
    cityName: string?
}

create type typeThread if not exists as open {
    uuid: string,
    url: string,
    site_full : string,
    site : string,
    site_section: string,
    site_categories: [string],
    section_title: string,
    title: string,
    title_full: string,
    published: datetime,
    replies_count: int32,
    participants_count: int32,
    site_type: string,
    country: string,
    spam_score: double,
    main_image: string,
    performance_score: int32,
    domain_rank: int32?,
    social: typeSocial
}

create type typePost if not exists as open{
    thread: typeThread,
    uuid: string,
    url: string,
    ord_in_thread: int32,
    author: string,
    published: datetime,
    title: string,
    text: string,
    highlightText: string,
    highlightTitle: string,
    language: string,
    external_links: [string],
    entities: typeEntities,
    rating: double?,
    crawled: datetime
}

create dataset ds_webhose_streaming(typePost) if not exists primary key uuid
using compaction policy prefix (("max-mergable-component-size"="134217728"),("max-tolerance-component-count"="10"))
with filter on crawled;

//"using" "compaction" "policy" CompactionPolicy ( Configuration )? )?
create index text_idx if not exists on ds_tweet("text") type keyword;
create index location_idx if not exists on ds_tweet(coordinate) type rtree;
create index time_idx if not exists on ds_tweet(create_at) type btree;
create index state_idx if not exists on ds_tweet(geo_tag.stateID) type btree;
create index county_idx if not exists on ds_tweet(geo_tag.countyID) type btree;
create index city_idx if not exists on ds_tweet(geo_tag.cityID) type btree;

create feed MessageFeed using localfs(
("path"="nc1:///data/Mar31-2016-us.adm"),
("format"="adm"),
("type-name"="typeTweet"));

set wait-for-completion-feed "true";
connect feed MessageFeed to dataset ds_tweet;